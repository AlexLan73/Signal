# SignalAnalyzer - GitHub Commands for Windows
# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GitHub –∏–∑ Windows

Write-Host "üêô SignalAnalyzer - GitHub Commands for Windows" -ForegroundColor Blue
Write-Host "==============================================" -ForegroundColor Blue

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
function Write-Status {
    param([string]$Message)
    Write-Host "[INFO] $Message" -ForegroundColor Blue
}

function Write-Success {
    param([string]$Message)
    Write-Host "[SUCCESS] $Message" -ForegroundColor Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host "[WARNING] $Message" -ForegroundColor Yellow
}

function Write-Error {
    param([string]$Message)
    Write-Host "[ERROR] $Message" -ForegroundColor Red
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Git
function Test-Git {
    try {
        $gitVersion = git --version 2>&1
        Write-Success "Git —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $gitVersion"
        return $true
    }
    catch {
        Write-Error "Git –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Git —Å https://git-scm.com"
        return $false
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ GitHub CLI
function Test-GitHubCLI {
    try {
        $ghVersion = gh --version 2>&1
        Write-Success "GitHub CLI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $ghVersion"
        return $true
    }
    catch {
        Write-Warning "GitHub CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        Write-Status "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ GitHub CLI..."
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ winget
        try {
            winget install --id GitHub.cli
            Write-Success "GitHub CLI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            return $true
        }
        catch {
            Write-Error "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å GitHub CLI. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é —Å https://cli.github.com"
            return $false
        }
    }
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git
function Set-Git {
    Write-Status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    $userName = git config --global user.name
    $userEmail = git config --global user.email
    
    if ([string]::IsNullOrEmpty($userName)) {
        Write-Warning "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Git –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
        Write-Host "–í—ã–ø–æ–ª–Ω–∏—Ç–µ: git config --global user.name '–í–∞—à–µ –ò–º—è'" -ForegroundColor Yellow
    }
    else {
        Write-Success "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Git: $userName"
    }
    
    if ([string]::IsNullOrEmpty($userEmail)) {
        Write-Warning "Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Git –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        Write-Host "–í—ã–ø–æ–ª–Ω–∏—Ç–µ: git config --global user.email '–≤–∞—à@email.com'" -ForegroundColor Yellow
    }
    else {
        Write-Success "Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Git: $userEmail"
    }
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub CLI
function Set-GitHubCLI {
    Write-Status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub CLI..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    try {
        gh auth status 2>$null
        Write-Success "GitHub CLI –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
        gh auth status
    }
    catch {
        Write-Warning "GitHub CLI –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
        Write-Status "–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é: gh auth login"
        Write-Status "–í—ã–±–µ—Ä–∏—Ç–µ GitHub.com –∏ –≤–µ–±-–±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
    }
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞ GitHub
function New-GitHubRepository {
    param(
        [Parameter(Mandatory=$true)]
        [string]$RepositoryName
    )
    
    Write-Status "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è '$RepositoryName' –Ω–∞ GitHub..."
    
    try {
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —á–µ—Ä–µ–∑ GitHub CLI
        gh repo create $RepositoryName `
            --description "SignalAnalyzer - Desktop Signal Analysis Tool" `
            --public `
            --clone
        
        if ($LASTEXITCODE -eq 0) {
            Write-Success "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π '$RepositoryName' —Å–æ–∑–¥–∞–Ω –∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω"
            
            # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            Set-Location $RepositoryName
            
            # –°–æ–∑–¥–∞–Ω–∏–µ README.md
            $readmeContent = @"
# SignalAnalyzer

Desktop Signal Analysis Tool for Windows and Ubuntu

## Features

- Signal generation and analysis
- Strobe system with ray configuration
- Real-time visualization
- Mathematical engine with FFT analysis
- Cross-platform support (Windows/Ubuntu)

## Installation

### Ubuntu
```bash
./launch/ubuntu_setup.sh
source activate_project.sh
```

### Windows
```powershell
.\launch\windows_setup.ps1
.\activate_project.ps1
```

## Usage

```bash
python launch/gui/main_app.py
```

## License

MIT License
"@
            
            $readmeContent | Out-File -FilePath "README.md" -Encoding UTF8
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏ –ø–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç
            git add .
            git commit -m "Initial commit: SignalAnalyzer project setup"
            git push -u origin main
            
            Write-Success "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ GitHub"
        }
        else {
            Write-Error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
            return $false
        }
    }
    catch {
        Write-Error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: $_"
        return $false
    }
}

# –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
function Copy-GitHubRepository {
    param(
        [Parameter(Mandatory=$true)]
        [string]$RepositoryUrl
    )
    
    Write-Status "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è '$RepositoryUrl'..."
    
    try {
        git clone $RepositoryUrl
        
        if ($LASTEXITCODE -eq 0) {
            Write-Success "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω"
            
            # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
            $repoName = [System.IO.Path]::GetFileNameWithoutExtension($RepositoryUrl)
            Set-Location $repoName
            
            # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
            if (Test-Path "activate_project.ps1") {
                & ".\activate_project.ps1"
            }
            
            Write-Success "–ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
        }
        else {
            Write-Error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
            return $false
        }
    }
    catch {
        Write-Error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: $_"
        return $false
    }
}

# –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º
function Sync-GitHubRepository {
    Write-Status "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º..."
    
    try {
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        git fetch origin
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        $status = git status --porcelain
        if ($status) {
            Write-Warning "–ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"
            Write-Status "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π..."
            git add .
            git commit -m "Update: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
        }
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        git push origin main
        
        if ($LASTEXITCODE -eq 0) {
            Write-Success "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω"
        }
        else {
            Write-Error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"
            return $false
        }
    }
    catch {
        Write-Error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $_"
        return $false
    }
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞
function New-GitHubRelease {
    param(
        [Parameter(Mandatory=$true)]
        [string]$Version,
        [string]$Message = ""
    )
    
    if ([string]::IsNullOrEmpty($Message)) {
        $Message = "Release version $Version"
    }
    
    Write-Status "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ v$Version..."
    
    try {
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–∞
        git tag -a "v$Version" -m $Message
        git push origin "v$Version"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ —á–µ—Ä–µ–∑ GitHub CLI
        gh release create "v$Version" `
            --title "Release v$Version" `
            --notes $Message `
            --latest
        
        if ($LASTEXITCODE -eq 0) {
            Write-Success "–†–µ–ª–∏–∑ v$Version —Å–æ–∑–¥–∞–Ω"
        }
        else {
            Write-Error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–ª–∏–∑–∞"
            return $false
        }
    }
    catch {
        Write-Error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–ª–∏–∑–∞: $_"
        return $false
    }
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
function Show-Help {
    Write-Host "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:" -ForegroundColor Yellow
    Write-Host ""
    Write-Host "  setup                     - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git –∏ GitHub CLI" -ForegroundColor White
    Write-Host "  create <repo_name>        - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π" -ForegroundColor White
    Write-Host "  clone <repo_url>          - –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π" -ForegroundColor White
    Write-Host "  sync                      - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º" -ForegroundColor White
    Write-Host "  release <version> [msg]   - –°–æ–∑–¥–∞—Ç—å —Ä–µ–ª–∏–∑" -ForegroundColor White
    Write-Host "  status                    - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å Git" -ForegroundColor White
    Write-Host "  help                      - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É" -ForegroundColor White
    Write-Host ""
    Write-Host "–ü—Ä–∏–º–µ—Ä—ã:" -ForegroundColor Yellow
    Write-Host "  .\github_windows_commands.ps1 setup" -ForegroundColor White
    Write-Host "  .\github_windows_commands.ps1 create signalanalyzer" -ForegroundColor White
    Write-Host "  .\github_windows_commands.ps1 clone https://github.com/user/signalanalyzer.git" -ForegroundColor White
    Write-Host "  .\github_windows_commands.ps1 sync" -ForegroundColor White
    Write-Host "  .\github_windows_commands.ps1 release 1.0.0 'Initial release'" -ForegroundColor White
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
function Show-Status {
    Write-Status "–°—Ç–∞—Ç—É—Å Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:"
    git status
    
    Write-Host ""
    Write-Status "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:"
    if (Test-Path ".git") {
        try {
            $remoteUrl = git remote get-url origin 2>$null
            if ($remoteUrl) {
                Write-Host "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: $remoteUrl" -ForegroundColor Cyan
            }
            else {
                Write-Host "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π" -ForegroundColor Cyan
            }
        }
        catch {
            Write-Host "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π" -ForegroundColor Cyan
        }
        
        $currentBranch = git branch --show-current
        Write-Host "–í–µ—Ç–∫–∞: $currentBranch" -ForegroundColor Cyan
        
        $lastCommit = git log -1 --oneline
        Write-Host "–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: $lastCommit" -ForegroundColor Cyan
    }
    else {
        Write-Warning "–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º"
    }
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function Main {
    param(
        [string]$Command = "help",
        [string]$Arg1 = "",
        [string]$Arg2 = ""
    )
    
    switch ($Command.ToLower()) {
        "setup" {
            Test-Git
            Test-GitHubCLI
            Set-Git
            Set-GitHubCLI
        }
        "create" {
            if ($Arg1) {
                New-GitHubRepository -RepositoryName $Arg1
            }
            else {
                Write-Error "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: create <–∏–º—è_—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è>"
            }
        }
        "clone" {
            if ($Arg1) {
                Copy-GitHubRepository -RepositoryUrl $Arg1
            }
            else {
                Write-Error "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: clone <URL_—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è>"
            }
        }
        "sync" {
            Sync-GitHubRepository
        }
        "release" {
            if ($Arg1) {
                New-GitHubRelease -Version $Arg1 -Message $Arg2
            }
            else {
                Write-Error "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: release <–≤–µ—Ä—Å–∏—è> [—Å–æ–æ–±—â–µ–Ω–∏–µ]"
            }
        }
        "status" {
            Show-Status
        }
        "help" {
            Show-Help
        }
        default {
            Write-Error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $Command"
            Show-Help
        }
    }
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
Main @args

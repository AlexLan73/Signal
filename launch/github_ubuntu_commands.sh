#!/bin/bash
# SignalAnalyzer - GitHub Commands for Ubuntu
# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GitHub –∏–∑ Ubuntu

echo "üêô SignalAnalyzer - GitHub Commands for Ubuntu"
echo "=============================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Git
check_git() {
    if ! command -v git &> /dev/null; then
        print_error "Git –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Git: sudo apt install git"
        return 1
    fi
    print_success "Git —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $(git --version)"
    return 0
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ GitHub CLI
check_gh() {
    if ! command -v gh &> /dev/null; then
        print_warning "GitHub CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        print_status "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ GitHub CLI..."
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ GitHub CLI
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt update
        sudo apt install gh
        
        print_success "GitHub CLI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        print_success "GitHub CLI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $(gh --version)"
    fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git
setup_git() {
    print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if [ -z "$(git config --global user.name)" ]; then
        print_warning "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Git –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
        echo "–í—ã–ø–æ–ª–Ω–∏—Ç–µ: git config --global user.name '–í–∞—à–µ –ò–º—è'"
    else
        print_success "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Git: $(git config --global user.name)"
    fi
    
    if [ -z "$(git config --global user.email)" ]; then
        print_warning "Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Git –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        echo "–í—ã–ø–æ–ª–Ω–∏—Ç–µ: git config --global user.email '–≤–∞—à@email.com'"
    else
        print_success "Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Git: $(git config --global user.email)"
    fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub CLI
setup_gh() {
    print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub CLI..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if ! gh auth status &> /dev/null; then
        print_warning "GitHub CLI –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
        print_status "–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é: gh auth login"
        print_status "–í—ã–±–µ—Ä–∏—Ç–µ GitHub.com –∏ –≤–µ–±-–±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
    else
        print_success "GitHub CLI –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
        gh auth status
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞ GitHub
create_repository() {
    local repo_name="$1"
    if [ -z "$repo_name" ]; then
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: create_repository <–∏–º—è_—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è>"
        return 1
    fi
    
    print_status "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è '$repo_name' –Ω–∞ GitHub..."
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —á–µ—Ä–µ–∑ GitHub CLI
    gh repo create "$repo_name" \
        --description "SignalAnalyzer - Desktop Signal Analysis Tool" \
        --public \
        --clone
    
    if [ $? -eq 0 ]; then
        print_success "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π '$repo_name' —Å–æ–∑–¥–∞–Ω –∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω"
        
        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        cd "$repo_name"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ README.md
        cat > README.md << 'EOF'
# SignalAnalyzer

Desktop Signal Analysis Tool for Windows and Ubuntu

## Features

- Signal generation and analysis
- Strobe system with ray configuration
- Real-time visualization
- Mathematical engine with FFT analysis
- Cross-platform support (Windows/Ubuntu)

## Installation

### Ubuntu
```bash
./launch/ubuntu_setup.sh
source activate_project.sh
```

### Windows
```powershell
.\launch\windows_setup.ps1
.\activate_project.ps1
```

## Usage

```bash
python launch/gui/main_app.py
```

## License

MIT License
EOF
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏ –ø–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç
        git add .
        git commit -m "Initial commit: SignalAnalyzer project setup"
        git push -u origin main
        
        print_success "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ GitHub"
    else
        print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
        return 1
    fi
}

# –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
clone_repository() {
    local repo_url="$1"
    if [ -z "$repo_url" ]; then
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: clone_repository <URL_—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è>"
        return 1
    fi
    
    print_status "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è '$repo_url'..."
    
    git clone "$repo_url"
    
    if [ $? -eq 0 ]; then
        print_success "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω"
        
        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
        local repo_name=$(basename "$repo_url" .git)
        cd "$repo_name"
        
        # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        if [ -f "activate_project.sh" ]; then
            source activate_project.sh
        fi
        
        print_success "–ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
    else
        print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
        return 1
    fi
}

# –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º
sync_repository() {
    print_status "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º..."
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    git fetch origin
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    if [ -n "$(git status --porcelain)" ]; then
        print_warning "–ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"
        print_status "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π..."
        git add .
        git commit -m "Update: $(date '+%Y-%m-%d %H:%M:%S')"
    fi
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    git push origin main
    
    if [ $? -eq 0 ]; then
        print_success "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω"
    else
        print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"
        return 1
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞
create_release() {
    local version="$1"
    local message="$2"
    
    if [ -z "$version" ]; then
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: create_release <–≤–µ—Ä—Å–∏—è> [—Å–æ–æ–±—â–µ–Ω–∏–µ]"
        return 1
    fi
    
    if [ -z "$message" ]; then
        message="Release version $version"
    fi
    
    print_status "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ v$version..."
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–∞
    git tag -a "v$version" -m "$message"
    git push origin "v$version"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ —á–µ—Ä–µ–∑ GitHub CLI
    gh release create "v$version" \
        --title "Release v$version" \
        --notes "$message" \
        --latest
    
    if [ $? -eq 0 ]; then
        print_success "–†–µ–ª–∏–∑ v$version —Å–æ–∑–¥–∞–Ω"
    else
        print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–ª–∏–∑–∞"
        return 1
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
show_help() {
    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo ""
    echo "  setup                     - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git –∏ GitHub CLI"
    echo "  create <repo_name>        - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
    echo "  clone <repo_url>          - –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
    echo "  sync                      - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º"
    echo "  release <version> [msg]   - –°–æ–∑–¥–∞—Ç—å —Ä–µ–ª–∏–∑"
    echo "  status                    - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å Git"
    echo "  help                      - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  ./github_ubuntu_commands.sh setup"
    echo "  ./github_ubuntu_commands.sh create signalanalyzer"
    echo "  ./github_ubuntu_commands.sh clone https://github.com/user/signalanalyzer.git"
    echo "  ./github_ubuntu_commands.sh sync"
    echo "  ./github_ubuntu_commands.sh release 1.0.0 'Initial release'"
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
show_status() {
    print_status "–°—Ç–∞—Ç—É—Å Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:"
    git status
    
    echo ""
    print_status "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:"
    if [ -d ".git" ]; then
        echo "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: $(git remote get-url origin 2>/dev/null || echo '–õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π')"
        echo "–í–µ—Ç–∫–∞: $(git branch --show-current)"
        echo "–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: $(git log -1 --oneline)"
    else
        print_warning "–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    local command="$1"
    local arg1="$2"
    local arg2="$3"
    
    case "$command" in
        "setup")
            check_git
            check_gh
            setup_git
            setup_gh
            ;;
        "create")
            create_repository "$arg1"
            ;;
        "clone")
            clone_repository "$arg1"
            ;;
        "sync")
            sync_repository
            ;;
        "release")
            create_release "$arg1" "$arg2"
            ;;
        "status")
            show_status
            ;;
        "help"|"--help"|"-h"|"")
            show_help
            ;;
        *)
            print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $command"
            show_help
            exit 1
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"

#!/usr/bin/env python3
"""Test script for SignalAnalyzer strobe system."""

import sys
from pathlib import Path
import numpy as np

# Add project root to Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

try:
    from PyQt6.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget, QPushButton, QLabel
    from PyQt6.QtCore import Qt
    
    from src.gui.strobe_widget import StrobeConfigWidget
    from src.visualization.strobe_plot import StrobePlotWidget
    from src.math.strobe_system import strobe_generator
    
    print("‚úÖ Strobe system imported successfully")
    
    class StrobeTestWindow(QMainWindow):
        """Test window for strobe system."""
        
        def __init__(self):
            super().__init__()
            self.setWindowTitle("SignalAnalyzer - –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Å—Ç—Ä–æ–±–æ–≤")
            self.setGeometry(100, 100, 1400, 900)
            
            self._setup_ui()
            self._test_strobe_generation()
        
        def _setup_ui(self):
            """Setup the test UI."""
            central_widget = QWidget()
            self.setCentralWidget(central_widget)
            
            layout = QVBoxLayout(central_widget)
            
            # Title
            title = QLabel("""
            <div style='text-align: center; padding: 20px;'>
                <h1>üéØ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Å—Ç—Ä–æ–±–æ–≤ SignalAnalyzer</h1>
                <h2>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–±–æ–≤ —Å –ª—É—á–∞–º–∏</h2>
            </div>
            """)
            title.setAlignment(Qt.AlignmentFlag.AlignCenter)
            layout.addWidget(title)
            
            # Test buttons
            button_layout = QVBoxLayout()
            
            self.test_btn = QPushButton("–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ç—Ä–æ–± (3 –ª—É—á–∞)")
            self.test_btn.setStyleSheet("""
                QPushButton {
                    background-color: #4CAF50;
                    color: white;
                    border: none;
                    padding: 15px 30px;
                    border-radius: 8px;
                    font-size: 16px;
                    font-weight: bold;
                }
                QPushButton:hover {
                    background-color: #45a049;
                }
            """)
            self.test_btn.clicked.connect(self.generate_test_strobe)
            button_layout.addWidget(self.test_btn)
            
            # Status
            self.status_label = QLabel("–ì–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Å–∏—Å—Ç–µ–º—ã —Å—Ç—Ä–æ–±–æ–≤")
            self.status_label.setStyleSheet("""
                padding: 15px;
                background-color: #e8f5e8;
                border: 1px solid #4caf50;
                border-radius: 8px;
                font-weight: bold;
                font-size: 14px;
            """)
            button_layout.addWidget(self.status_label)
            
            layout.addLayout(button_layout)
            
            # Strobe configuration widget
            self.strobe_config = StrobeConfigWidget()
            layout.addWidget(self.strobe_config)
            
            # Strobe plot widget
            self.strobe_plot = StrobePlotWidget()
            layout.addWidget(self.strobe_plot)
            
            # Connect signals
            self.strobe_config.strobe_generated.connect(self.strobe_plot.plot_strobe)
        
        def _test_strobe_generation(self):
            """Test strobe generation."""
            self.status_label.setText("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å—Ç—Ä–æ–±–æ–≤ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é")
        
        def generate_test_strobe(self):
            """Generate test strobe."""
            try:
                # Generate test strobe
                data, metadata = strobe_generator.create_test_strobe()
                
                # Plot the strobe
                self.strobe_plot.plot_strobe(data, metadata)
                
                self.status_label.setText(f"""
                ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å—Ç—Ä–æ–± —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!
                üìä –î–∞–Ω–Ω—ã–µ: {len(data)} —Ç–æ—á–µ–∫
                üéØ –õ—É—á–µ–π: {metadata.get('num_rays', 0)}
                üìè –î–ª–∏–Ω–∞: {metadata.get('total_length', 0)} —Ç–æ—á–µ–∫
                üîß –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏: {metadata.get('sample_rate', 0):.0f} –ì—Ü
                """)
                
                # Print detailed info
                print(f"\nüéØ –¢–µ—Å—Ç–æ–≤—ã–π —Å—Ç—Ä–æ–± —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:")
                print(f"   üìä –û–±—â–∞—è –¥–ª–∏–Ω–∞: {len(data)} —Ç–æ—á–µ–∫")
                print(f"   üéØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—É—á–µ–π: {metadata.get('num_rays', 0)}")
                print(f"   üìè –¢–æ—á–µ–∫ –Ω–∞ –ª—É—á: {metadata.get('points_per_ray', 0)}")
                print(f"   üîß –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏: {metadata.get('sample_rate', 0):.0f} –ì—Ü")
                
                if 'rays' in metadata:
                    for i, ray in enumerate(metadata['rays']):
                        print(f"\n   –õ—É—á {i}:")
                        print(f"     üéµ –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞: {ray.get('signal_type', 'unknown')}")
                        print(f"     üì° –ß–∞—Å—Ç–æ—Ç–∞: {ray.get('frequency', 0):.1f} –ì—Ü")
                        print(f"     üìä –ê–º–ø–ª–∏—Ç—É–¥–∞: {ray.get('amplitude', 0):.2f} –í")
                        print(f"     üìç –§–∞–∑–∞: {np.degrees(ray.get('phase', 0)):.1f}¬∞")
                        print(f"     üìè –î–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö: {ray.get('data_length', 0)} —Ç–æ—á–µ–∫")
                        print(f"     üéØ –ò–Ω–¥–µ–∫—Å—ã: {ray.get('start_index', 0)}-{ray.get('end_index', 0)}")
                
                print(f"\nüé® –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è:")
                print(f"   üìà –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫: –≤—Å–µ –ª—É—á–∏")
                print(f"   üìä FFT: —á–∞—Å—Ç–æ—Ç–Ω–∞—è –æ–±–ª–∞—Å—Ç—å")
                print(f"   üéØ –í—ã–±—Ä–∞–Ω–Ω—ã–π –ª—É—á: –¥–µ—Ç–∞–ª—å–Ω—ã–π –≤–∏–¥")
                print(f"   üìç –§–∞–∑–∞: —Ñ–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")
                print(f"   üåà –°–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º–∞: –≤—Ä–µ–º—è-—á–∞—Å—Ç–æ—Ç–∞")
                
                # Save strobe
                strobe_generator.save_strobe("test_strobe.json", data, metadata)
                print(f"\nüíæ –°—Ç—Ä–æ–± —Å–æ—Ö—Ä–∞–Ω–µ–Ω: test_strobe.json")
                
            except Exception as e:
                self.status_label.setText(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ç—Ä–æ–±–∞: {e}")
    
    # Create and show the test window
    app = QApplication(sys.argv)
    window = StrobeTestWindow()
    window.show()
    
    print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ —Å–∏—Å—Ç–µ–º—ã —Å—Ç—Ä–æ–±–æ–≤ —Å–æ–∑–¥–∞–Ω–æ")
    print("\nüéØ –ß—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å:")
    print("  ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ç—Ä–æ–±–∞ –∏–∑ 3 –ª—É—á–µ–π")
    print("  ‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ª—É—á–µ–π")
    print("  ‚Ä¢ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–±–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    print("  ‚Ä¢ FFT –∞–Ω–∞–ª–∏–∑ –∏ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º–∞")
    print("  ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–æ–±–æ–≤")
    print("  ‚Ä¢ –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —à—É–º–æ–≤")
    
    print("\nüöÄ –°–∏—Å—Ç–µ–º–∞ —Å—Ç—Ä–æ–±–æ–≤ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!")
    print("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ç—Ä–æ–±–∞")
    
    # Run the application
    sys.exit(app.exec())
    
except ImportError as e:
    print(f"‚ùå Error importing strobe system: {e}")
    print("Make sure all dependencies are installed:")
    print("  py -m pip install PyQt6 matplotlib numpy")
    sys.exit(1)
except Exception as e:
    print(f"‚ùå Strobe system test failed: {e}")
    sys.exit(1)
